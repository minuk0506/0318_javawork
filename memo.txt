Ctrl + Shift + Enter : 자동 정렬(이클립스)
(html에서는 안됨)

0318 [

    Git Bash : git-hub와 프로젝트를 연동할때 사용하는 작은 command 도구, Linux 명령체계와 유사
    윈도우에서 Linux 기본 명령을 연습할 수 있다
    =Linux Bourne shell

    윈도우 cmd : 윈도우에서 마우스를 사용하지 않고 키보드로 명령을 입력하여 어떤 기능을 수행할때 사용하는 도구

    Linux Command Shell : Linux 운영체제에서 키보드로 명령을 입력하여 어떤 기능을 수행할때 사용하는 명령입력창(window)


    git-bash명령

    방향키↑ : 이전명령, 방향키↓ : 최신명령, shift + insert : 붙여넣기

    $ : prompt : 명령을 내리면(명령입력후 Emter)
    명령을 수행할 준비가 되었다 라는 표식

    clear : 현재 화면의 메시지를 지우는 명령

    git-hub에 처음 올리기 위해 하는 git-bash 절차
    git config --global user.name 유저이름
    git config --global user.email 유저이메일
    (내 이름과 이메일을 글로벌로(git에) 등록해 놓겠다)

    github.com에 repository 생성

    git init : git local 저장소 설정(초기화, 신청)

    git add README.md -> git add . : 현재폴더의 모든파일, 모든폴더(.)를 압축하여 .git 폴더에 저장해달라

    git commit -m first(first는 폴더옆에 이름)

    git branch -M master : 권한을 마스터로 설정(기본값 마스터라 안해도됨)

    git remote add origin https://github.com/유저이름/repository이름.git
    (여기 스펠링이라도 틀리면 .git 폴더 지우고 처음부터 다시해야됨)
    (git remote add 원격저장소이름 원격저장소url)

    git push -u origin master
    {master(브랜치)로 origin(원격저장소)에 push(저장한다)}

    rm -rf .git : local repository(.git) 삭제 - 복구불가(위험)
    rm(remove약자)

    (.md 마크다운) README.md로 해야 git에서 보임

    툴 자체에서 연동해 올리는 건 오류나 원하지 않는 코드 등록 등으로 권장하지 않음
    github.com에서 아직 파일 수정 하지 않기

    한번 설정하면 변경하기 전까진 
    add commit push 절차만 거치면됨

    git clone 깃허브repository주소 (주소뒤에 뭔갈 붙이면 그 이름으로 폴더 만들기) : repository내용을 복사해서 다운로드함

    git pull origin master : 동기화 (한 repository를 두 곳 이상에서 쓸 때 A컴퓨터에서 수정한 내용을 B컴퓨터에도 적용시킬때 B컴퓨터에서 사용하는 명령어)

    eclipse.ini파일 editor로 열어서 자바 bin폴더 경로를 -vm(14번줄) 밑에 붙여넣기
    C:\Program Files\Java\jdk-11.0.14\bin(자바 bin폴더경로)

    touch .gitignore(파일이름) : github 업로드 제외 설정
    강사님 repository에 Reference에 .gitignore 복사해서 내 .gitignore파일 서브라임텍스트로 열어 붙여넣기
    (.gitignore 파일을 editor로 열기, 업로드 예외 파일 리스트 작성 후 저장)

    github에서 clone등으로 받은 파일 바로 안열림(import로 어케해야됨)

]

0321 [
    VCS (Version Control System)
        소스코드의 변경 시점 관리
        어떤 내용을 누가 어느 시점에 변경했는지 관리
        git, svn 등이 많이 사용됨

    명령어 : 
        git bash : ls (리스트) 현재 폴더에 항목을 보여줌
            ls -al 올 리스트
        cmd : dir 현재 폴더에 항목을 보여줌

        git bash : clear 현재창 깨끗히
        cmd : cls 현재창 깨끗히

        git bash : cd  (체인지디렉토리) 현재 위치 이동
        cmd : cd  현재 위치 이동
        cd ..\.. 같이 한번에 여러번 이동 가능 (bash는/ cmd는\)

        git bash : * 모든 것
        ex)web, web0317이라는 폴더가 있을때
        rm -rf web*하면 둘다 삭제됨

        git bash : javac 파일이름 - 자바파일 컴파일 시키기
            java 파일이름 - 컴파일된 자바파일 실행
]

0322 [
    IDE : 통합개발환경 (Intergrated Development Environment)
        소스코드작성, 컴파일, 테스트, 배포 등을 하나의 프로그램에서
        처리할 수 있도록 만들어진 개발도구
]

0323 [
    컴파일(Compile)
        Text type으로 작성된 소스코드를 컴퓨터에 주입하기 위해 BIN(이진수) 코드로 변환하는 것
    컴파일러(Compiler)
        소스코드를 컴파일하는 소프트웨어

class 선언문, class prototype
public class Var_01 {
	
	여기에서 부터 실제 명령문 코드가 작성되는 곳
	public static void main(String[] args) {
		
	코드에서 사용하는 수의 체계
	정수, 실수
	정수형(int type), 실수형(float type)
		
	int : 정수형 데이터를 저장할 기억장소를 예약해달라
	num1 : 예약한 기억장소에 쉬운 num1 이라는 이름을 붙여라
	= 30 : 예약된 num1 기억장소에 30을 저장(할당)
	정수형 변수 num1 을 선언하고 정수 255 값으로 초기화 하라
	정수형 변수 num2 를 선언하고 정수 88 값으로 초기화 하라
	
    int num1 = 255;
	int num2 = 88;
		
	System.out.println(num1+num2);
	System.out.println(num1*num2);
	System.out.println(num2-num1);
	System.out.println(num2/num1);
		
		
	System.out.println(40.0/30.0);
		
	키워드(int) : 저장될 데이터가 어떤형식인가
	변수(num4) : 우리가 데이터를 저장할 기억장소의 이름이다
	num3 = 40; : num3에 40을 대입, 할당하라 
	 
	선언 만 된 변수에서는 값을 읽을 수 없다
	반드시 앞에서 어떤 값이라도 저장, 할당을 해야만 이후에 읽을 수 있다
			
	정수형 변수 num3, num4 를 선언 "만" 하기
	int num3;
	int num4;
	
	선언된 정수형변수 num3, num4 에 정수 40을 대입하기
	대입, 할당, 저장
	num3 = 40;
	num4 = 100;
		
	System.out.println(num3 + num4);
		
	변수에 어떤 값을 저장해야할지 아직 정해지지 않았을 때는
	숫자일 경우는 0으로 초기화를 해 둔다
	int num5 = 0;
	System.out.println(num5);
		
	이름이 같은 변수는 선언불가
	int num1 = 0; (num1 이라는 이름의 변수는 위에서 선언했음)
	int num11a_ = 0;
		
    변수 명명규칙과 패턴
	1. 첫글자는 무조건 소문자 (규칙)
	2. 이후에는 대소문, 숫자, _ 를 조합할 수 있다 (규칙)
	3. 두개 이상의 단어를 조합하여 만드는 것이 좋다 (패턴)
	4. 두개 이상의 단어를 조합할때 두번째 단어부터 첫글자는 대문자 
	 	=> camel case (패턴)
	5. 두개 이상의 단어를 조합할때 첫번째 단어는 변수의 type으로 만드는 것이 좋다 
	 	=> 헝가리언 표기법(패턴)
	int a = 0; 같이 선언하면 코드가 커졌을때 절대 못 찾음
		 
	int intNum1 = 0;
		
	좋은 변수 이름 짓기
	변수명이 길어지더라도 2개 이상의 단어를 조합하자
	변수명만 보고 어떤 데이터가 담겨있는지 유추할 수 있도록 하자

]

0325 [
    자바(Java) 언어의 특징
    1. 완전한 객체지향 언어이다
    2. 운영체제 독립적이다
    3. 비교적 배우기 쉽다
    4. 자동 메모리 관리(Gabage Collection)가 된다
    5. 네트워크와 분산처리를 지원한다
    6. 멀티 쓰레드를 지원한다
    7. 동적 로딩(Dynamic Loading)을 지원한다
]

0328 [
    프로그래머, 개발자 (Programmer, Developer)
    코드작성, 분석 및 구현, 디버깅, 컴파일, 테스트 및 구현을 통해 원하는 출력물을 
    만들어내는 일
    시스템이 제대로 작동되기 위한 모든 다양한 요소를 다룰 수 있는 영역
    다양한 유형의 복잡한 시나리오와 프로그램을 다룬다
    문제에 대한 솔루션을 개념화하고 분석한 다음 문제 해결 방법을 결정.
    사소한 문제로 인해 발생할 수 있는 것들을 발견하고 예방한다
    코드분석, 패턴 디자인 등을 연구하고 습득 향상 시킨다
]

0329 [
    method : 메소드, 메서드, 함수(function)
        - jdk에서 지원하지 않는 여러 명령문을 그룹으로 묶어 새로운 명령(어) 처럼 사용한다
        method를 사용(실행) 하려면 먼저 method 가 정의 되어야 한다
        public int num(){
          return 100;
        }
        - method 의 실행 결과를 다른 변수에 저장 할 수 있다
        int result = num();
]

0303 [
    JDK ( Java Developement Kit )
    - Java 언어를 base로 하여 Application 을 개발하는데
        활용할 수 있는 미리 준비된 class, method 들의 모음.
    - 마치 모형 Kit를 조립하는 것처럼, 아이디어를 현실화 할 수 있는 매우 다양한
        기능들이 이미 준비되어 있음.
    - JDK의 도구만 잘 사용하여도, 아이디어를 Application 으로 충분히 구현할 수 있음.
    - JDK 11 기준 14,500 여개는 소스코드도 공개되어 있음.

    산술연산 : 사칙연산, 나머지
    비교연산 : 결과값이 boolean (true, false)으로 나오는 <, >, ==, !=, <=, >= 연산
    ALU(arithmetic logic unit) : 산술논리장치. 산술연산과 논리연산을 계산하는 디지털 회로
        컴퓨터 중앙처리장치의 기본 설계 블록
    레지스터(register) : 컴퓨터의 프로세서 내에 자료를 보관하는 아주 빠른 기억 장소
        일반적으로 현재 계산을 수행중인 값을 저장하는 데 사용됨
]

0331 [
    객체지향 프로그래밍(OOP)
    - 컴퓨터 프로그래밍 페러다임의 한가지로
    - 프로그래밍에서 필요한 데이터를 추상화 하고
    - 상태와 행위를 가진 객체를 만들고
    - 그 객체들 간의 유기적인 상호 작용을 통해
    - 문제를 해결하는 프로그래밍 방법이다
    - 소프트웨어의 위기를 타개하기 위해 만들어진 프로그래밍방법(객체지향)

    변수에 값을 담는 방법
    bYes = true - 그냥 담기
    bWhat = bYes - 변수에 담긴 값을 담기
    bWhat = bYes == true - 연산결과를 담기

    A	B	OR	AND		A	B	+	*
	f	f	f	f		0	0	0	0
	t	f	t	f		1	0	1	0
	f	t	t	f		0	1	1	0
	t	t	t	t		1	1	1	1

    !(true || false) -> !true && !false -> false && true
    드모르간 법칙
]

0401 [
    
    오류(error)
    1. 코딩 문법오류로 인한 컴파일 시 오류와 런타임(실행)시 널포인트 참조와 같은 오류로 심각한
    문제를 야기시켜 프로세스(어플리케이션)가 종료 되거나 중단된다.
    2. 시스템 에러(error)는 컴퓨터 하드웨어의 오동작 또는 고장으로 인해 응용프로그램에 
    이상이 생겼거나 JVM 실행에 문제가 생겼을 경우 발생하는 것.
    3. 코딩 문법 오류가 아닌 경우 개발자가 미리 예측하여 처리할 수 없는 경우가 많아,
    애플리케이션에서 오류에 대한 처리(해결)를 할 수 없는 경우가 많다.
    4. 오류가 발생하는 상황을 미리 예측하여 Exception 처럼 핸들링 할 수도 있다.

    Exception
    1. 오류와 같이 응용프로그램, 프로세스를 종료 시키는 것은 유사하다.
    2. 오류와 달리 개발자가 예측할 수 있고 적절한 처리(Exception Handling)를 수행하여
    최소한 응용프로그램, 프로세스 종료를 방지할 수 있다.

    html/css 수업 transform 상담때문에 빠져서 못배우고 집에감
    집에서 보충 공부하기
]

0404 [
    식별자(Identifier) 란
    1. 프로젝트에서 이름만으로 구분할 수 있는 것들로
    클래스, 메서드, 변수 등의 이름을 말한다.
    2. 식별자는 유일(Unique)성을 만족해야 한다.

    식별자 명명(이름부여) 규칙
    1. 첫글자는 영문자이어야 한다.
        1) 클래스는 첫 글자를 반드시 대문자로 시작한다.
        2) 메서드와 변수는 첫 글자를 반드시 소문자로 시작한다.
    2. 두번째 글자부터는 영문, 숫자, _를 사용할 수 있다.
        1) 키워드(public, int 등), 특수문자, 공백은 사용할 수 없다.
    3. 두 단어 이상을 조합하여 이름만 보고 용도를 알 수 있도록 의미 있게 만드는 것이 좋다.
        1) 두 단어 이상을 조합할 때는 두 번째 단어부터 단어 시작을 대문자로 한다.
    4. 변수명은 첫 단어를 변수의 type 으로 정하는 것이 좋다.
    5. 특별한 경우 첫 글자를 _, $로 시작할 수도 있다.

    ! 중요
    과목이 끝나면 시험을 봐야하는데 오늘이 응용SW기초기술 과목 끝나는 날이었음

    다음주 내로 응용SW기초기술 시험
    받은 책에서 챕터별로 서술형으로 시험 챕터2데이터베이스는 안나옴
    (챕터1, 3(4번도 좀 나올 수 있음)) 챕터끝나기전에 있는 평가 페이지 정도
    오픈북으로 할 수도
    60점 안되면 보충수업, 재시험 (3차시험까지 통과 못하면 미이수처리)

    조별과제 (목요일에 다시 공지하심)(포트폴리오에 들어감)
    발표 조원 전원참여 3인 1조 정도
]
0405 [
    클래스(Class)
    1. 일반적인 코드 개념에서 모듈에 해당하며 코드를 파일로 분리하여 작성하는 것
    2. 객체지향 프로그래밍 언어인 자바에서는 연관되어 있는 메서드, 변수들들 모아 놓은 집합으로
    객체를 만들기 위한 설계도 역할 수행
    
    객체(Object)
    1. 객체지향 프로그래밍에서 실제로 구현해야 할 대상
    2. 클래스를 사용하여 선언된 변수 상태

    인스턴스(Instance)
    1. 클래스를 바탕으로 선언된 object를 메모리에 탑재하고,
    사용가능한 상태가 되는 구체적인 실체
    2. 인스턴스는 객체에 포함되는 개념이지만,
    객체는 아직 사용할 준비가 덜 된 상태이고, 인스턴스가 되었을 때
    객체의 메서드 등을 호출하여 실행할 수 있다.
]
0406 [
    소스코드(Source code)
    1. Text type의 *.java 파일
    2. 메모장 등으로 내용을 읽을 수 있다.
    3. 영어 문장과 유사한 문법으로 작성한다.
    
    이진 기계어 코드(Binary Machine Code)
    1. 컴퓨터의 CPU가 해석 할 수 있는 이진수 모음으로 만들어진 코드가
    2. 소스코드를 "컴파일(Compile)" 과정을 거쳐 생성된다.
    3. *.java 코드를 컴파일 하면 *.class 파일이 생성되며 코드가 저장된다.

    Application 실행
    1. 이진 기계어 코드를 컴퓨터의 주기억장치(Main Memory)에 올리고 (Loading)
    순서대로 CPU로 보내어 명령을 실행하고, 연산을 수행하는 것
    2. 연산 결과는 Console 등의 화면에 출력된다.

    GoF의 디자인 패턴 - 책 확인

    시험 0504에 봄 응용SW기초기술 책에서 나옴
    응용SW기초기술 0504 에 평가
    과제는 이번주 일요일까지
]
0407[
    for(초기화코드; 비교연산문; 변수변환){ }
    for(index; index < 10; index++){ }
    1. 초기화 코드는 for() 명령이 실행될때 최초 한번만 실행
    보통 변수를 초기화, clear 하는 코드 실행
    2. 비교연산문의 연산 결과가 true 일때 블럭({ }) 코드 실행
    3. 변수변환 연산에 의해 비교연산문에서 사용할 변수 값을 증, 감 연산하는 코드
]
0408[
    모듈(Module)
    1. 파일, 폴더 단위로 코드 조각들을 모아서 프로그래밍을 한다
    이 코드 조각들을 패키징하여 하나의 프로젝트를 구현한다
    2. 코드 조각들을 모은 파일, 폴더 단위를 모듈이라고 한다
    3. 프로그래밍 언어마다 구현 방식이 다르다
    4. 모듈을 모아서 최종 프로젝트를 완성하는데 이것을 "build" 한다 라고한다

    자바의 클래스
    1. 자바는 모듈을 "클래스 파일(*.java)" 로 생성한다
    2. 클래스 파일은 "패키지(package, 폴더)" 단위로 묶는다
    3. 클래스 파일에는 "메서드(Method)" 를 구현한다
    4. 자바의 클래스 파일(모듈)은 다른 언어와 달리 "변수(데이터)"도 함께 포함 할 수 있다
    5. 메서드와 변수 묶음 -> 클래스 묶음 -> 패키지묶음 -> 프로젝트Build -> Application

    < 검색해서 채워넣기
    맨 머신 인터페이스(MMI : Man-machine interface), 휴먼 머신 인터페이스(HMI : Human-machine-interface)
    사람과 기계간에 상호의사전달을 할 수 있는 물리적, 가상적 매개체

    유저 인터페이스 UI
    유저가 제품/서비스를 사용할 때 보게 되는 면

    그래픽 유저 인터페이스 GUI
    사용자가 편리하게 사용할 수 있도록 입출력 등의 기능을 알기 쉬운 아이콘 따위의 그래픽으로 나타낸 것이다.

    캐릭터 유저 인터페이스 CUI
    도스, cmd, bash, 유닉스 셀 환경 등의 텍스트 기반의 UI
    >
]
0411[
    method
    1. 프로그래밍 언어에서 공통으로 function, 함수라고 부른다
    2. 자바에서는 항상 class{} 블럭 내부에 선언되므로 축소적 의미로 method 라고 한다

    자바의 중요 method
    1. public static void main(String[] args){ }
    진입점, 시작점 method 이며, 자바 코드를 Run 했을때
    jvm에 의해 제일 먼저 호출되는 method 이다

    2. public ServiceV1(){ }
    생성자 method 이며, 클래스를 선언하면 자동으로 선언된다
    ServiceV1 serviceV1 = new ServiceV1() 처럼
    클래스를 사용하여 인스턴스를 생성할때 호출한다
    클래스 영역의 변수들을 초기화 하는 코드를 포함한다
]
0412[
    변수(Varriable) int intNum = 0;
    - 연산을 수행할 데이터를 저장할 저장소(기억장소)
    - 연산을 수행할 데이터를 기억장소에 저장할 때,
    개발자가 저장 위치에 붙인 이름, 별명

    인스턴스(Instance) Exec00 exec00 = new Exec00();
    - 클래스를 사용하여 선언한 객체(object)이며,
    new키워드와 생성자를 통해 초기화된 상태
    - 변수의 명명규칙과 동일한 방식으로 이름 부여
    - 클래스에 선언된 method를 호출하거나
    클래스 변수(속성)에 접근(읽고, 쓰기)할 때 연결하는 통로 역할 수행

    void type 의 메소드는 앞에 변수가 올 수 없다  exec00.print();
    return type 이 있는 메소드는 결과를 변수에 저장할 수 있다.  int sum = exec00.sum();

    씽굿 [ 공모전 사이트]
    IT 쪽은 공모전 많이 할 수록 좋음
]
0413[
    변수 scope
    - 변수, 인스턴스, 메서드 등은 선언된 위치, 접근제한자
    설정에 따라 외부에서 접근하는 방식이 다르다
    
    public static void main(String[] args){
        int intNum = 0 ;
    }
    
    - main method에서 선언된 intNum 변수는 main method 블럭 ( { } )이 종료되면 소멸된다
    
    for(int i = 0 ; i < 100 ; i ++ ) {
        int intSum = 0 ;
        intSum += i ;
    }
    
    - for() 명령문에 선언된 변수 i 와 for() 명령 블럭( { } )에 선언된 intSum은
    for() 명령문 블럭( { } )이 끝나면 사용할 수 없다.
]
0414[
    클래스, 변수, 메서드 및 속성 이름 작명 코딩 패턴 : 이름작성 Case 패턴
    1. 표준(lower)Camel Case : myName
    2. Upper Camel Case : ServiceV1, ScoreService, StudentService
    3. Kebab case : my-name, ham-button, top-menu
    4. 헝가리언 표기법 : intKor, strNation, bYes
    5. snack case (Underscore notation) : my_name
    6. Upper Case format(시스템, 전역변수 사용) : MY_PROJECT_USER_NAME

    자바책에서 학습한 내용 : 챕터(1, 2, 3, 4, 5, 7, 9, 11)
    오늘 하는 내용 10장

    https://callor.com:12100
    callor88@네이버
    !aa1234
]
0415[
    생성자 method
    1. 클래스를 사용하여 객체(object) 선언 후 인스턴스화 할때 호출하는 method
    2. 생성자 method는 return type(void, int, String 등)이 없다
    3. 클래스 이름과 같다.(첫글자 대문자)
    4. 클래스를 선언하면 "기본 생성자"는 자동으로 선언된다
    5. "임의 생성자"를 선언하면 기본 생성자를 선언해 주어야 한다.
    6. 생성자에서는 인스턴스변수(클래스 영역의 변수)를 초기화 하는 코드가 포함된다

    public class ServiceV1{
    private String[] students;

    //기본생성자
    public ServiceV1(){
        this(10);
    }
    //임의생성자
    public ServiceV1(int length){
        students = new String[length];
    }
    }
]
0418[
    Java의 역사
    1. 1991년 썬(Sun) 마이크로 시스템에서 고안된 오크(oak)에서 시작되었다
        제임스 고슬링에 의해 구체화 되었다.
    2. 처음에는 손안의 리모콘에 탑재될 소프트웨어를 만드는 것이 목표였다.
    3. 인터넷의 등장과 함께 1996년 1월 정식으로 발표된다.
    4. 초기 자바는 웹 브라우저에서 작동되는 작은 어플리케이션으로 애플릿(Applet)이라고 불렀다.
        웹페이지에서 사운드 애니메이션 등 멀티미디어를 제공할 수 있는 유일한 방법이었다.
    5. 보안상 이유로 웹 브라우저에서 애플릿을 작동할 수 없게 되면서
        Web server 프로그래밍을 통해 동적 Web Application을 작동시키는
        서블릿(Servlet), JSP(Java Server Page)로 방향이 전환 되었다.
    6. Web Application Server 프로그래밍 개발툴로 1위의 자리를 지키고 있으며,
    안드로이드 스마트폰에서 작동되는 어플을 개발하는 언어로 사용되고 있다.
]
0419[
    Module 이란
    1. 모듈화를 통해 분리된 시스템의 기능들로, 서브루틴, 서브시스템, 함수, method 등을 말한다

    Module 의 결합도
    1. 모듈 간에 상호 의존하는 정도 또는 두 모듈 사이의 연관 관계
    
    Module 의 응집도
    1. 정보 은닉 개념을 확장한 것으로, 명령이나 호출문 등
    모듈의 내부 요소들의 서로 관련되어 있는 정도
    2. 모듈이 독립적인 기능으로 정의 되어있는 정도를 의미
    
    잘 설계된 Module 은?
    1. 결합도는 낮고, 응집도는 높아야 한다.

    객체지향의 5가지 특징
    추상화, 정보의 은닉, 캡슐화, 상속, 다형성
]