Ctrl + Shift + Enter : 자동 정렬(이클립스)
(html에서는 안됨)
font Awesome - icon사이트
cdnjs - font Awesome 검색 - type All, JavaScript 첫번째 링크들 script로 추가
aos - animate on scroll library : 애니메이션 제작 도와주는 사이트
0318 [

    Git Bash : git-hub와 프로젝트를 연동할때 사용하는 작은 command 도구, Linux 명령체계와 유사
    윈도우에서 Linux 기본 명령을 연습할 수 있다
    =Linux Bourne shell

    윈도우 cmd : 윈도우에서 마우스를 사용하지 않고 키보드로 명령을 입력하여 어떤 기능을 수행할때 사용하는 도구

    Linux Command Shell : Linux 운영체제에서 키보드로 명령을 입력하여 어떤 기능을 수행할때 사용하는 명령입력창(window)


    git-bash명령

    방향키↑ : 이전명령, 방향키↓ : 최신명령, shift + insert : 붙여넣기

    $ : prompt : 명령을 내리면(명령입력후 Emter)
    명령을 수행할 준비가 되었다 라는 표식

    clear : 현재 화면의 메시지를 지우는 명령

    git-hub에 처음 올리기 위해 하는 git-bash 절차
    git config --global user.name 유저이름
    git config --global user.email 유저이메일
    (내 이름과 이메일을 글로벌로(git에) 등록해 놓겠다)

    github.com에 repository 생성

    git init : git local 저장소 설정(초기화, 신청)

    git add README.md -> git add . : 현재폴더의 모든파일, 모든폴더(.)를 압축하여 .git 폴더에 저장해달라

    git commit -m first(first는 폴더옆에 이름)

    git branch -M master : 권한을 마스터로 설정(기본값 마스터라 안해도됨)

    git remote add origin https://github.com/유저이름/repository이름.git
    (여기 스펠링이라도 틀리면 .git 폴더 지우고 처음부터 다시해야됨)
    (git remote add 원격저장소이름 원격저장소url)

    git push -u origin master
    {master(브랜치)로 origin(원격저장소)에 push(저장한다)}

    rm -rf .git : local repository(.git) 삭제 - 복구불가(위험)
    rm(remove약자)

    (.md 마크다운) README.md로 해야 git에서 보임

    툴 자체에서 연동해 올리는 건 오류나 원하지 않는 코드 등록 등으로 권장하지 않음
    github.com에서 아직 파일 수정 하지 않기

    한번 설정하면 변경하기 전까진 
    add commit push 절차만 거치면됨

    git clone 깃허브repository주소 (주소뒤에 뭔갈 붙이면 그 이름으로 폴더 만들기) : repository내용을 복사해서 다운로드함

    git pull origin master : 동기화 (한 repository를 두 곳 이상에서 쓸 때 A컴퓨터에서 수정한 내용을 B컴퓨터에도 적용시킬때 B컴퓨터에서 사용하는 명령어)

    eclipse.ini파일 editor로 열어서 자바 bin폴더 경로를 -vm(14번줄) 밑에 붙여넣기
    C:\Program Files\Java\jdk-11.0.14\bin(자바 bin폴더경로)

    touch .gitignore(파일이름) : github 업로드 제외 설정
    강사님 repository에 Reference에 .gitignore 복사해서 내 .gitignore파일 서브라임텍스트로 열어 붙여넣기
    (.gitignore 파일을 editor로 열기, 업로드 예외 파일 리스트 작성 후 저장)

    github에서 clone등으로 받은 파일 바로 안열림(import로 어케해야됨)

]

0321 [
    VCS (Version Control System)
        소스코드의 변경 시점 관리
        어떤 내용을 누가 어느 시점에 변경했는지 관리
        git, svn 등이 많이 사용됨

    명령어 : 
        git bash : ls (리스트) 현재 폴더에 항목을 보여줌
            ls -al 올 리스트
        cmd : dir 현재 폴더에 항목을 보여줌

        git bash : clear 현재창 깨끗히
        cmd : cls 현재창 깨끗히

        git bash : cd  (체인지디렉토리) 현재 위치 이동
        cmd : cd  현재 위치 이동
        cd ..\.. 같이 한번에 여러번 이동 가능 (bash는/ cmd는\)

        git bash : * 모든 것
        ex)web, web0317이라는 폴더가 있을때
        rm -rf web*하면 둘다 삭제됨

        git bash : javac 파일이름 - 자바파일 컴파일 시키기
            java 파일이름 - 컴파일된 자바파일 실행
]

0322 [
    IDE : 통합개발환경 (Intergrated Development Environment)
        소스코드작성, 컴파일, 테스트, 배포 등을 하나의 프로그램에서
        처리할 수 있도록 만들어진 개발도구
]

0323 [
    컴파일(Compile)
        Text type으로 작성된 소스코드를 컴퓨터에 주입하기 위해 BIN(이진수) 코드로 변환하는 것
    컴파일러(Compiler)
        소스코드를 컴파일하는 소프트웨어

class 선언문, class prototype
public class Var_01 {
	
	여기에서 부터 실제 명령문 코드가 작성되는 곳
	public static void main(String[] args) {
		
	코드에서 사용하는 수의 체계
	정수, 실수
	정수형(int type), 실수형(float type)
		
	int : 정수형 데이터를 저장할 기억장소를 예약해달라
	num1 : 예약한 기억장소에 쉬운 num1 이라는 이름을 붙여라
	= 30 : 예약된 num1 기억장소에 30을 저장(할당)
	정수형 변수 num1 을 선언하고 정수 255 값으로 초기화 하라
	정수형 변수 num2 를 선언하고 정수 88 값으로 초기화 하라
	
    int num1 = 255;
	int num2 = 88;
		
	System.out.println(num1+num2);
	System.out.println(num1*num2);
	System.out.println(num2-num1);
	System.out.println(num2/num1);
		
		
	System.out.println(40.0/30.0);
		
	키워드(int) : 저장될 데이터가 어떤형식인가
	변수(num4) : 우리가 데이터를 저장할 기억장소의 이름이다
	num3 = 40; : num3에 40을 대입, 할당하라 
	 
	선언 만 된 변수에서는 값을 읽을 수 없다
	반드시 앞에서 어떤 값이라도 저장, 할당을 해야만 이후에 읽을 수 있다
			
	정수형 변수 num3, num4 를 선언 "만" 하기
	int num3;
	int num4;
	
	선언된 정수형변수 num3, num4 에 정수 40을 대입하기
	대입, 할당, 저장
	num3 = 40;
	num4 = 100;
		
	System.out.println(num3 + num4);
		
	변수에 어떤 값을 저장해야할지 아직 정해지지 않았을 때는
	숫자일 경우는 0으로 초기화를 해 둔다
	int num5 = 0;
	System.out.println(num5);
		
	이름이 같은 변수는 선언불가
	int num1 = 0; (num1 이라는 이름의 변수는 위에서 선언했음)
	int num11a_ = 0;
		
    변수 명명규칙과 패턴
	1. 첫글자는 무조건 소문자 (규칙)
	2. 이후에는 대소문, 숫자, _ 를 조합할 수 있다 (규칙)
	3. 두개 이상의 단어를 조합하여 만드는 것이 좋다 (패턴)
	4. 두개 이상의 단어를 조합할때 두번째 단어부터 첫글자는 대문자 
	 	=> camel case (패턴)
	5. 두개 이상의 단어를 조합할때 첫번째 단어는 변수의 type으로 만드는 것이 좋다 
	 	=> 헝가리언 표기법(패턴)
	int a = 0; 같이 선언하면 코드가 커졌을때 절대 못 찾음
		 
	int intNum1 = 0;
		
	좋은 변수 이름 짓기
	변수명이 길어지더라도 2개 이상의 단어를 조합하자
	변수명만 보고 어떤 데이터가 담겨있는지 유추할 수 있도록 하자

]

0325 [
    자바(Java) 언어의 특징
    1. 완전한 객체지향 언어이다
    2. 운영체제 독립적이다
    3. 비교적 배우기 쉽다
    4. 자동 메모리 관리(Gabage Collection)가 된다
    5. 네트워크와 분산처리를 지원한다
    6. 멀티 쓰레드를 지원한다
    7. 동적 로딩(Dynamic Loading)을 지원한다
]

0328 [
    프로그래머, 개발자 (Programmer, Developer)
    코드작성, 분석 및 구현, 디버깅, 컴파일, 테스트 및 구현을 통해 원하는 출력물을 
    만들어내는 일
    시스템이 제대로 작동되기 위한 모든 다양한 요소를 다룰 수 있는 영역
    다양한 유형의 복잡한 시나리오와 프로그램을 다룬다
    문제에 대한 솔루션을 개념화하고 분석한 다음 문제 해결 방법을 결정.
    사소한 문제로 인해 발생할 수 있는 것들을 발견하고 예방한다
    코드분석, 패턴 디자인 등을 연구하고 습득 향상 시킨다
]

0329 [
    method : 메소드, 메서드, 함수(function)
        - jdk에서 지원하지 않는 여러 명령문을 그룹으로 묶어 새로운 명령(어) 처럼 사용한다
        method를 사용(실행) 하려면 먼저 method 가 정의 되어야 한다
        public int num(){
          return 100;
        }
        - method 의 실행 결과를 다른 변수에 저장 할 수 있다
        int result = num();
]

0303 [
    JDK ( Java Developement Kit )
    - Java 언어를 base로 하여 Application 을 개발하는데
        활용할 수 있는 미리 준비된 class, method 들의 모음.
    - 마치 모형 Kit를 조립하는 것처럼, 아이디어를 현실화 할 수 있는 매우 다양한
        기능들이 이미 준비되어 있음.
    - JDK의 도구만 잘 사용하여도, 아이디어를 Application 으로 충분히 구현할 수 있음.
    - JDK 11 기준 14,500 여개는 소스코드도 공개되어 있음.

    산술연산 : 사칙연산, 나머지
    비교연산 : 결과값이 boolean (true, false)으로 나오는 <, >, ==, !=, <=, >= 연산
    ALU(arithmetic logic unit) : 산술논리장치. 산술연산과 논리연산을 계산하는 디지털 회로
        컴퓨터 중앙처리장치의 기본 설계 블록
    레지스터(register) : 컴퓨터의 프로세서 내에 자료를 보관하는 아주 빠른 기억 장소
        일반적으로 현재 계산을 수행중인 값을 저장하는 데 사용됨
]

0331 [
    객체지향 프로그래밍(OOP)
    - 컴퓨터 프로그래밍 페러다임의 한가지로
    - 프로그래밍에서 필요한 데이터를 추상화 하고
    - 상태와 행위를 가진 객체를 만들고
    - 그 객체들 간의 유기적인 상호 작용을 통해
    - 문제를 해결하는 프로그래밍 방법이다
    - 소프트웨어의 위기를 타개하기 위해 만들어진 프로그래밍방법(객체지향)

    변수에 값을 담는 방법
    bYes = true - 그냥 담기
    bWhat = bYes - 변수에 담긴 값을 담기
    bWhat = bYes == true - 연산결과를 담기

    A	B	OR	AND		A	B	+	*
	f	f	f	f		0	0	0	0
	t	f	t	f		1	0	1	0
	f	t	t	f		0	1	1	0
	t	t	t	t		1	1	1	1

    !(true || false) -> !true && !false -> false && true
    드모르간 법칙
]

0401 [
    
    오류(error)
    1. 코딩 문법오류로 인한 컴파일 시 오류와 런타임(실행)시 널포인트 참조와 같은 오류로 심각한
    문제를 야기시켜 프로세스(어플리케이션)가 종료 되거나 중단된다.
    2. 시스템 에러(error)는 컴퓨터 하드웨어의 오동작 또는 고장으로 인해 응용프로그램에 
    이상이 생겼거나 JVM 실행에 문제가 생겼을 경우 발생하는 것.
    3. 코딩 문법 오류가 아닌 경우 개발자가 미리 예측하여 처리할 수 없는 경우가 많아,
    애플리케이션에서 오류에 대한 처리(해결)를 할 수 없는 경우가 많다.
    4. 오류가 발생하는 상황을 미리 예측하여 Exception 처럼 핸들링 할 수도 있다.

    Exception
    1. 오류와 같이 응용프로그램, 프로세스를 종료 시키는 것은 유사하다.
    2. 오류와 달리 개발자가 예측할 수 있고 적절한 처리(Exception Handling)를 수행하여
    최소한 응용프로그램, 프로세스 종료를 방지할 수 있다.

    html/css 수업 transform 상담때문에 빠져서 못배우고 집에감
    집에서 보충 공부하기
]

0404 [
    식별자(Identifier) 란
    1. 프로젝트에서 이름만으로 구분할 수 있는 것들로
    클래스, 메서드, 변수 등의 이름을 말한다.
    2. 식별자는 유일(Unique)성을 만족해야 한다.

    식별자 명명(이름부여) 규칙
    1. 첫글자는 영문자이어야 한다.
        1) 클래스는 첫 글자를 반드시 대문자로 시작한다.
        2) 메서드와 변수는 첫 글자를 반드시 소문자로 시작한다.
    2. 두번째 글자부터는 영문, 숫자, _를 사용할 수 있다.
        1) 키워드(public, int 등), 특수문자, 공백은 사용할 수 없다.
    3. 두 단어 이상을 조합하여 이름만 보고 용도를 알 수 있도록 의미 있게 만드는 것이 좋다.
        1) 두 단어 이상을 조합할 때는 두 번째 단어부터 단어 시작을 대문자로 한다.
    4. 변수명은 첫 단어를 변수의 type 으로 정하는 것이 좋다.
    5. 특별한 경우 첫 글자를 _, $로 시작할 수도 있다.

    ! 중요
    과목이 끝나면 시험을 봐야하는데 오늘이 응용SW기초기술 과목 끝나는 날이었음

    다음주 내로 응용SW기초기술 시험
    받은 책에서 챕터별로 서술형으로 시험 챕터2데이터베이스는 안나옴
    (챕터1, 3(4번도 좀 나올 수 있음)) 챕터끝나기전에 있는 평가 페이지 정도
    오픈북으로 할 수도
    60점 안되면 보충수업, 재시험 (3차시험까지 통과 못하면 미이수처리)

    조별과제 (목요일에 다시 공지하심)(포트폴리오에 들어감)
    발표 조원 전원참여 3인 1조 정도
]
0405 [
    클래스(Class)
    1. 일반적인 코드 개념에서 모듈에 해당하며 코드를 파일로 분리하여 작성하는 것
    2. 객체지향 프로그래밍 언어인 자바에서는 연관되어 있는 메서드, 변수들들 모아 놓은 집합으로
    객체를 만들기 위한 설계도 역할 수행
    
    객체(Object)
    1. 객체지향 프로그래밍에서 실제로 구현해야 할 대상
    2. 클래스를 사용하여 선언된 변수 상태

    인스턴스(Instance)
    1. 클래스를 바탕으로 선언된 object를 메모리에 탑재하고,
    사용가능한 상태가 되는 구체적인 실체
    2. 인스턴스는 객체에 포함되는 개념이지만,
    객체는 아직 사용할 준비가 덜 된 상태이고, 인스턴스가 되었을 때
    객체의 메서드 등을 호출하여 실행할 수 있다.
]
0406 [
    소스코드(Source code)
    1. Text type의 *.java 파일
    2. 메모장 등으로 내용을 읽을 수 있다.
    3. 영어 문장과 유사한 문법으로 작성한다.
    
    이진 기계어 코드(Binary Machine Code)
    1. 컴퓨터의 CPU가 해석 할 수 있는 이진수 모음으로 만들어진 코드가
    2. 소스코드를 "컴파일(Compile)" 과정을 거쳐 생성된다.
    3. *.java 코드를 컴파일 하면 *.class 파일이 생성되며 코드가 저장된다.

    Application 실행
    1. 이진 기계어 코드를 컴퓨터의 주기억장치(Main Memory)에 올리고 (Loading)
    순서대로 CPU로 보내어 명령을 실행하고, 연산을 수행하는 것
    2. 연산 결과는 Console 등의 화면에 출력된다.

    GoF의 디자인 패턴 - 책 확인

    시험 0504에 봄 응용SW기초기술 책에서 나옴
    응용SW기초기술 0504 에 평가
    과제는 이번주 일요일까지
]
0407[
    for(초기화코드; 비교연산문; 변수변환){ }
    for(index; index < 10; index++){ }
    1. 초기화 코드는 for() 명령이 실행될때 최초 한번만 실행
    보통 변수를 초기화, clear 하는 코드 실행
    2. 비교연산문의 연산 결과가 true 일때 블럭({ }) 코드 실행
    3. 변수변환 연산에 의해 비교연산문에서 사용할 변수 값을 증, 감 연산하는 코드
]
0408[
    모듈(Module)
    1. 파일, 폴더 단위로 코드 조각들을 모아서 프로그래밍을 한다
    이 코드 조각들을 패키징하여 하나의 프로젝트를 구현한다
    2. 코드 조각들을 모은 파일, 폴더 단위를 모듈이라고 한다
    3. 프로그래밍 언어마다 구현 방식이 다르다
    4. 모듈을 모아서 최종 프로젝트를 완성하는데 이것을 "build" 한다 라고한다

    자바의 클래스
    1. 자바는 모듈을 "클래스 파일(*.java)" 로 생성한다
    2. 클래스 파일은 "패키지(package, 폴더)" 단위로 묶는다
    3. 클래스 파일에는 "메서드(Method)" 를 구현한다
    4. 자바의 클래스 파일(모듈)은 다른 언어와 달리 "변수(데이터)"도 함께 포함 할 수 있다
    5. 메서드와 변수 묶음 -> 클래스 묶음 -> 패키지묶음 -> 프로젝트Build -> Application

    < 검색해서 채워넣기
    맨 머신 인터페이스(MMI : Man-machine interface), 휴먼 머신 인터페이스(HMI : Human-machine-interface)
    사람과 기계간에 상호의사전달을 할 수 있는 물리적, 가상적 매개체

    유저 인터페이스 UI
    유저가 제품/서비스를 사용할 때 보게 되는 면

    그래픽 유저 인터페이스 GUI
    사용자가 편리하게 사용할 수 있도록 입출력 등의 기능을 알기 쉬운 아이콘 따위의 그래픽으로 나타낸 것이다.

    캐릭터 유저 인터페이스 CUI
    도스, cmd, bash, 유닉스 셀 환경 등의 텍스트 기반의 UI
    >
]
0411[
    method
    1. 프로그래밍 언어에서 공통으로 function, 함수라고 부른다
    2. 자바에서는 항상 class{} 블럭 내부에 선언되므로 축소적 의미로 method 라고 한다

    자바의 중요 method
    1. public static void main(String[] args){ }
    진입점, 시작점 method 이며, 자바 코드를 Run 했을때
    jvm에 의해 제일 먼저 호출되는 method 이다

    2. public ServiceV1(){ }
    생성자 method 이며, 클래스를 선언하면 자동으로 선언된다
    ServiceV1 serviceV1 = new ServiceV1() 처럼
    클래스를 사용하여 인스턴스를 생성할때 호출한다
    클래스 영역의 변수들을 초기화 하는 코드를 포함한다
]
0412[
    변수(Varriable) int intNum = 0;
    - 연산을 수행할 데이터를 저장할 저장소(기억장소)
    - 연산을 수행할 데이터를 기억장소에 저장할 때,
    개발자가 저장 위치에 붙인 이름, 별명

    인스턴스(Instance) Exec00 exec00 = new Exec00();
    - 클래스를 사용하여 선언한 객체(object)이며,
    new키워드와 생성자를 통해 초기화된 상태
    - 변수의 명명규칙과 동일한 방식으로 이름 부여
    - 클래스에 선언된 method를 호출하거나
    클래스 변수(속성)에 접근(읽고, 쓰기)할 때 연결하는 통로 역할 수행

    void type 의 메소드는 앞에 변수가 올 수 없다  exec00.print();
    return type 이 있는 메소드는 결과를 변수에 저장할 수 있다.  int sum = exec00.sum();

    씽굿 [ 공모전 사이트]
    IT 쪽은 공모전 많이 할 수록 좋음
]
0413[
    변수 scope
    - 변수, 인스턴스, 메서드 등은 선언된 위치, 접근제한자
    설정에 따라 외부에서 접근하는 방식이 다르다
    
    public static void main(String[] args){
        int intNum = 0 ;
    }
    
    - main method에서 선언된 intNum 변수는 main method 블럭 ( { } )이 종료되면 소멸된다
    
    for(int i = 0 ; i < 100 ; i ++ ) {
        int intSum = 0 ;
        intSum += i ;
    }
    
    - for() 명령문에 선언된 변수 i 와 for() 명령 블럭( { } )에 선언된 intSum은
    for() 명령문 블럭( { } )이 끝나면 사용할 수 없다.
]
0414[
    클래스, 변수, 메서드 및 속성 이름 작명 코딩 패턴 : 이름작성 Case 패턴
    1. 표준(lower)Camel Case : myName
    2. Upper Camel Case : ServiceV1, ScoreService, StudentService
    3. Kebab case : my-name, ham-button, top-menu
    4. 헝가리언 표기법 : intKor, strNation, bYes
    5. snack case (Underscore notation) : my_name
    6. Upper Case format(시스템, 전역변수 사용) : MY_PROJECT_USER_NAME

    자바책에서 학습한 내용 : 챕터(1, 2, 3, 4, 5, 7, 9, 11)
    오늘 하는 내용 10장

    https://callor.com:12100
    callor88@네이버
    !aa1234
]
0415[
    생성자 method
    1. 클래스를 사용하여 객체(object) 선언 후 인스턴스화 할때 호출하는 method
    2. 생성자 method는 return type(void, int, String 등)이 없다
    3. 클래스 이름과 같다.(첫글자 대문자)
    4. 클래스를 선언하면 "기본 생성자"는 자동으로 선언된다
    5. "임의 생성자"를 선언하면 기본 생성자를 선언해 주어야 한다.
    6. 생성자에서는 인스턴스변수(클래스 영역의 변수)를 초기화 하는 코드가 포함된다

    public class ServiceV1{
    private String[] students;

    //기본생성자
    public ServiceV1(){
        this(10);
    }
    //임의생성자
    public ServiceV1(int length){
        students = new String[length];
    }
    }
]
0418[
    Java의 역사
    1. 1991년 썬(Sun) 마이크로 시스템에서 고안된 오크(oak)에서 시작되었다
        제임스 고슬링에 의해 구체화 되었다.
    2. 처음에는 손안의 리모콘에 탑재될 소프트웨어를 만드는 것이 목표였다.
    3. 인터넷의 등장과 함께 1996년 1월 정식으로 발표된다.
    4. 초기 자바는 웹 브라우저에서 작동되는 작은 어플리케이션으로 애플릿(Applet)이라고 불렀다.
        웹페이지에서 사운드 애니메이션 등 멀티미디어를 제공할 수 있는 유일한 방법이었다.
    5. 보안상 이유로 웹 브라우저에서 애플릿을 작동할 수 없게 되면서
        Web server 프로그래밍을 통해 동적 Web Application을 작동시키는
        서블릿(Servlet), JSP(Java Server Page)로 방향이 전환 되었다.
    6. Web Application Server 프로그래밍 개발툴로 1위의 자리를 지키고 있으며,
    안드로이드 스마트폰에서 작동되는 어플을 개발하는 언어로 사용되고 있다.
]
0419[
    Module 이란
    1. 모듈화를 통해 분리된 시스템의 기능들로, 서브루틴, 서브시스템, 함수, method 등을 말한다

    Module 의 결합도
    1. 모듈 간에 상호 의존하는 정도 또는 두 모듈 사이의 연관 관계
    
    Module 의 응집도
    1. 정보 은닉 개념을 확장한 것으로, 명령이나 호출문 등
    모듈의 내부 요소들의 서로 관련되어 있는 정도
    2. 모듈이 독립적인 기능으로 정의 되어있는 정도를 의미
    
    잘 설계된 Module 은?
    1. 결합도는 낮고, 응집도는 높아야 한다.

    객체지향의 5가지 특징
    추상화, 정보의 은닉, 캡슐화, 상속, 다형성
]
0420[
    객체지향(Object-oriented Programming, OOP)이란
    1. 컴퓨터 프로그래밍 페러다임의 한가지
    2. 컴퓨터 목록을 명령어의 목록으로 보는 시각에서 탈피
    3. 프로그래밍에서 필요한 "데이터를 추상화" 하고,
    "상태(데이터)"와 "행위(메소드)"를 가진 "객체"를 생성하고,
    객체들 간의 유기적인 상호 작용을 통해 문제를 해결하는 프로그래밍 방법
    4. 객체들 간에는 "메세지" 를 주고 받으며 "데이터를 처리"
    5. 유지보수를 쉽게 하여 "소프트웨어 위기"를 벗어나는 한 가지 방법으로 인식
    6. "추상화", "상속", "정보은닉과 캡슐화", "다형성" 등의 특징이 있다.
]
0421[
    객체지향(Object-oriented Programming, OOP) 장 단점
    
    코드 재사용 용이
    1. 이미 잘 만들어진 클래스를 사용할 수 있고 상속을 받아 확장하여 사용할 수 있다.
    
    유지 보수가 쉽다
    1. 절차 지향(구조적) 프로그래밍에 비해 수정해야 할 부분을 쉽게 찾고 변경할 수 있다.

    대형 프로젝트에 적합하다
    1. 클래스 단위로 모듈화가 쉽기 때문에 협업과 업무 분담이 쉽다.

    단점
    1. 처리속도가 절차 지향보다 상대적으로 늦다.
    2. 객체가 많아 지면 용량이 커질 수 있다.
    3. 추상화 등의 객체 설계를 하는데 많은 시간과 노력이 필요하다.
    설계를 잘 하지 못하면 절차 지향보다 프로젝트를 성공하기 어렵다.
]
0422[
    interface 를 사용한 class 다형성 구조

    1. Java의 interface
        1) 클래스를 정의하기 위한 설계로 역할을 수행하는 특별한 class
        2) interface 를 implements(상속) 한 클래스는
        interface에 정의된 모든 method를 반드시 선언(작성)해야 한다.
    
    2. interface 를 사용한 객체의 다형성
        1) interface는 implements 한 클래스들의 Parent 이다
        2) interface로 객체를 선언하고,
        implements 한 클래스의 생성자로 인스턴스를 생성한다.
        3) 업그레이드된 클래스를 사용하고자 하면 생성자만 교체하면
        다른 코드는 그대로 사용가능하다.
]
0425[
    MVC(Model View Controller)패턴
    1. 사용자가 컴퓨터를 통해 Request 를 하면
    2. Model 을 통해 데이터를 가져오고
    3. 그 정보를 바탕으로 view 에서 UI(시각적 표현)을 수행한다
    4. Model View Controller 는 코드가 변경되더라도 상호간에 최소한의 영향만으로 프로젝트가 구현되어야 한다
    5. View 는 사용자와 상호작용하며
    6. Controller 는 데이터와 비즈니스 로직을 담당한다.

    User -> REQUEST -> Controller -> MANUPLATES -> Model -> UPDATE -> View -> SEES -> User
]
0426[
    // Scanner 클래스를 사용하여 scan 객체 생성
    Scanner scan = new Scanner(System.in);
    // Random 클래스를 사용하여 random 객체 생성
    Random random = new Random();
    // String 클래스를 사용하여 문자열형 객체 생성
    String sting = new String();
    // System.in 클래스를 사용하여 is 객체 생성
    InputStream is = System.in
    // System.out 클래스를 사용하여 os 객체 생성
    OutputStream os = System.out
]
0427[
    DBMS( DataBase Managiment System )
    1. 많은 데이터를 스토리지에 보관하관리하는 소프트웨어
    2. 스토리지에 보관된 많은 데이터 중에서 원하는 조건의 데이터를 쉽게 조회할 수 있게 구성된 소프트웨어

    RDBMS( RelationShip DataBase Managiment System )
    1. 관계형 데이터베이스 시스템
    2. 많은 데이터를 관리하는 데이터베이스 소프트웨어중
    모든 데이터를 "테이블" 이라는 관점으로 보여주는 시스템
    3. SQL(Structed Query Lang.)명령어를 사용하여 데이터를 관리
]
0428[
    SQL(Structed Query Lang.)
    1. RDBMS 에 접근하기 위한 데이터베이스 코딩 언어
    2. DDL, DML, DCL, TCL, 등이 있다
    
    DDL(Data Definition Lang.) 데이터 정의어
    1. 데이터저장소, Table, 사용자, 인덱스 등 데이터베이스 객체(Object) 생성, 제거, 변경
    2. CREATE : 생성, DROP : 제거, ALTER : 변경

    DML(Data Manipulation Lang.) 데이터 조작어
    1. 생성된 데이터 Table 을 기준으로 CRUD 실행
    2. INSERT(Create, 추가), SELECT(Read, 조회), UPDATE(UPDATE, 변경), 
    DELETE(Delete, 삭제)

    DCL(Data Control Lang.) 데이터 제어어
    1. 데이터베이스의 접근권한 등을 설정
    2. GRANT : 권한 부여, REVOKE : 권한 회수
]
0429[
    인터페이스
    1. 팀 프로젝트에서 코드 규약을 정의한다
    2. 여러 구현체에서 사용하는 공통적인 부분을 추상화 한다
        클래스의 다형성이라고 한다
    3. 객체간의 "연결, 소통"을 돕는 중간 역할을 한다
    4. 메서드의 프로토 타입만 정의 한다
    5. 메서드의 구체적인 코드가 없다
    6. 인터페이스를 상속(Implements) 하는 구현체 클래스는
        인터페이스에 정의된 모든 메서드를 반드시 구현해야 한다
    7. 클래스의 다형성을 가능하게 하여 코드간 결합도를 낮출 수 있다
]
0502[
    Data가 포함된 Java 프로젝트
    1. Data 추상화 : 사용할 Data중 필요한 항목이 무엇인지 파악한다

    2. VO(Value Object) 클래서 작성 : 추상화 된 데이터를 기준으로
    VO클래스를 작성한다.

    3. Service 클래스 작성
        1) Data 생성 method
        2) 생성된 Data 확인 method
        3) 생성된 Data에 대한 연산 method

    4. Controller 클래스 작성
        1) main() method 를 작성하고 Service 클래스와 연결
        2) Data 생성, Data확인, 연산후 Data 확인, 최종 결과 출력 확인

        강의실 뒤에 붙인 UI기획 과제 확인

        0504 응용SW 시험

        0523 프로그래밍 언어 활용, 응용 java 공부한 범위 내에서 시험준비
        문제 : 서술형 1개, 코딩 1개 
        문제 내용 : 개념, 코딩

        0520 UI구현 조별과제 발표 이후 백엔드까지해서는 0617
        (학원정보검색 및 스케줄)
]
0503[
    객체의 독립성
    1. 클래스를 통해 선언 및 생성된 객체는
    추상화된 Data(변수)와 행위(메서드)를 포함한다.
    2. 생성된 객체는 독립적이며, 다른 객체에 대하여 비정상적인 접근을 허용하지 않는다.
    3. 객체는 1개 일 수 있고, 배열과 리스트를 통하여 다수의 객체일 수 있다.
    4. 배열 요소에 "저장된" 각각의 객체는 다른 요소의 객체와 완전 독립적이다.
    5. 리스트 요소에 "추가된" 각각의 객체는 다른 요소의 객체와 완전 독립적이다.
]
0504[
    프레임 워크

    1. 차, 비행기, 배 같은 탈것과 같은 잘 만들어진 "운송 수단"이라고 생각하면 된다.
    
    2. 여행을 하려면 운송 수단에 사람이 탑승하여 시동을 걸고, 기어를 넣고, 핸들을 작동하고, 운전을 해야 한다.

    3. 하지만, 운송 수단은 서로 대체할 수 없다.
    
    4. 하늘을 날려면 비행기를 타야하고, 도로를 달리려면, 자동차가 훨씬 유용하다. 바다에서는 배를 타야만 한다.
    
    5. 애초에 그 목적에 맞게 만들어졌기 때문에, 톱이나 망치를 가지고 탈 것을 처음부터 직접 만들 필요를 없게 한다.
    
    6. 정해진 규칙에 따라 시동 걸고, 기어를 넣고, 핸들을 돌리기만 하면 된다.
    
    7. 즉, 프레임워크는 이미 프로그래밍할 규칙이 정해져 있는 클래스, 모듈을 활용하여 규칙에 맞도록 개발자의 아이디어를 구현하는데 도움을 줄 수 있는 도구이다.
]
0509[
    SpringMVC패턴
    클라이언트 -> HTTP요청 ->Dispatcher Servlet
    -> 1. 핸들러조회 -> 핸들러매핑
    -> 2. 핸들러를 처리할 수 있는 핸들러 어댑터 조회 -> 핸들러 어댑터 목록
    -> 3. handle(handler) 핸들러 어댑터 -> 4. handler 호출 -> 핸들러(컨트롤러)
    5. 핸들러어댑터 -> ModelAndView 반환 -> Dispatcher Servlet
    -> 6. viewResolver 호출 -> viewResolver -> View반환 -> Dispatcher Servlet
    -> 8. render(model) 호출 -> View -> HTML 응답

    수행과제
    Project:Java_60_App_02
    Package:com.callor.app
    1. 학생의 국어, 영어, 수학 점수를 저장 할 model.ScoreVO 클래스를 작성
    2. 다음 method 를 포함하는
    service.ScoreService 인터페이스 작성
    void inputScore();
    void saveScore();
    3. service.impl.ScoreServiceImplV1 클래스 작성
    ScoreService 인터페이스 상속 후 method 구현

    수행과제
    1. inputScore() method 에서
    키보드로 학생의 이름, 국어, 영어, 수학점수를 입력받고
    VO 객체에 담은 후 scList 에 추가
    2. 학생의 이름을 입력받을 때 QUIT 를 입력하면 입력종료
    3. QUIT 가 아닌경우 계속 입력받기
]
0510[
    커뮤니티
    1. 코딩 = 개발 ? NO : 협업
    2. 누군가 나와 대화를 할 때 숨이 막혀 한다면?
    3. 사소한 대화를 하는 동안 아이디어가 떠오르고, 문제해결이 된다면?

    생산성
    1. 개발은 시간 싸움이다 : 야근은 필수가 아니라 선택이다.
    2. 환상적인 코드보다 빨리 완성된 코드가 좋은 코드이다. 단, 버그가 없어야 한다.

    지속적인 학습
    1. 학습은 좋은 개발자가 계속 좋은 개발자로 남는 길이다
    2. 학습은 보통 개발자가 좋은 개발자가 될 수 있는 중요한 요소이다.

    코드 리딩과 라이팅
    1. 코드리딩 : 만들어진 소스코드를 리딩하고 명명규칙 파악하기 : 협업에서 가장 중요
    2. 잘 정돈되고 직관적이며 네이밍이 잘된 코드 작성하기 : 내 코드는 혼자 보는게 아니다.
    3. 내가 만든 코드는 누가 봐도 쉽게 이해할 수 있어야 한다.

]
0511[
    HTTP에서 데이터를 보내는 방식(Request Method)
    GET method
    1. GET 은 서버로부터 정보를 조회하기 위해 설계되었다
    2. URL 주소에 쿼리 스트링(?변수=값&변수=값) 형식으로 전송한다.
    GET 은 요청을 전송할 때 필요한 데이터를 Body 에 담지 않고, 쿼리 스트링을 통해 전송한다.
    3. 단순한 값을 전송할 때 사용한다.
    4. 모든 데이터가 노출되어 보안에 취약하다. 민감정보는 절대 담아서는 안된다.
    5. 전체 길이는 255자를 넘지 못한다.
    POST method
    1. POST 는 리소스를 생성/변경하기 위해 설계되었다.
    2. HTTP 프로토콜의 Body에 데이터를 실어서 전송한다.
    3. 보통 form tag로 둘러 쌓인 input tag에 입력된 값을 전송할 때 사용한다.
    4. 전송하는 데이터가 표면상으로 노출되지 않는다.
    5. 전송하는 데이터 크기에 제한없다. 그림도 전송가능하다.
    6. 전송하는 데이터의 암호화 용이하다.

    capsule-render
    seeyoufarm
    github-states
    github-profile-trophy
]
0512[
    클래스와 인스턴스(객체)
    클래스
    1. 어떤문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거처
    속성(Attribute), 행위(Behavior)를 변수와 메서드 개념으로 정의 한 것

    인스턴스(객체)
    1. 클래스에 정의된 것을 토대로 하여 실제 정보처리 연산을 수행하는데 사용되는 데이터
    2. 클래스 또는 인터페이스 Type 으로 선언하고 생성자를 호출하여 초기화 한 상태
    StudentVO stVO = new StudentVO();
    Service service = new ServiceImpl();
]
0513[
    PRIMARY KEY
    1. 기본 키(PK)를 설정하여 데이터 조작에 유일한 절대성을 부여하는 것
    2. 한 레코드의 데이터를 수정, 삭제하여도
        다른 레코드에 영향을 미치지 않는다.
        이를 무결성 유지 라고 한다
    3. 기본키의 값은 유일(UNIQUE)해야 하며 NOT NULL 성질을 갖는다.
    4. 자동으로 Unique Index 가 설정된다.
    5. 한 개의 Table 에 1개만 존재한다.

    다음주는 java 복습
    복습내용 중에 다다음주 시험 문제가 나옴
]
0516[
    클래스의 의존성 주입(DI) - IOC(제어의 역전)
]
0517[
    클래스의 의존성 주입(DI) 스프링 컨테이너
    spring framework mvc 패턴에서는 프로젝트가 시작되면
    @Component(@Controller,@Service) 로 설정된 클래스들을
    각각의 이름으로 객체 인스턴스를 생성하여 준비해 놓는다.
    객체가 필요한 곳이 있으면 ioc 컨테이너에서 객체를 주입해 준다.

    시험범위는 Java_60_App_04 내용에서 나옴

    0517과제 AddrEx05, AddServiceV1 나이순 정렬문제

    선생님 깃허브 Java_30_Arrays_06 SortEx2 에 정렬관련있음
]
0518[
    오류(Error)
    1. 코딩 문법 오류로 인한 "컴파일" 시 오류와 "런타임" 시 널포인트 참조와 같은 오류가 있으며 심각한 문제를 야기 시켜 프로세스(애플리케이션)가 종료 되거나 중단 된다.
    2. 시스템 에러(Error)는 컴퓨터 하드웨어의 오동작 또는 고장으로 인해 응용프로그램에 이상이 생겼거나 JVM 실행에 문제가 생겼을 경우 발생한다.
    3. 코딩 문법 오류는 IDE가 알려주거나 컴파일 단계에서 발견된다.
    4. 런타임시 오류는 사전에 개발자가 미리 예측하기 어려운 경우가 많기 때문에 문법 상 강제 상황을 제외하고 애플리케이션의 런타임 오류에 대한 처리(해결)를 하지 않는 경우가 많다.
    5. 오류가 발생하는 상황을 항상 미리 예측하여 적절한 Exception 핸들링 하는 것이 좋다.

    예외(Exception) 처리
    1. 예외 상황도 오류와 같이 응용프로그, 프로세스를 종료 시키는 것은 유사하다.
    2. 개발자 예측할 수 는 상황이 많으며, 적절한 처리(Exception Handling)를 수행하여 최소한 응용프로그램, 프로세스가 중단되지 않도 해야한다.
    3. Exception 처리가 잘 되어 프로세스 종료를 최대한 방지하는 것이 좋은 애플리케이션이다.
]
0519[
    객체지향의 5가지 키워드
    추상화
    - 현실세계를 컴퓨터 프로그래밍 화 하는 단계
    - 불필요한 정보는 버리고, 중요한 정보만 간추려 공통 속성 기능을 묶는 단계 

    캡슐화
    - 서로 관련된 기능과 특성을 한곳에 모으고 분류하여 재활용을 용이하게 하는 것

    정보 은닉
    - 캡슐화된 정보에 직접 접근하지 못하도록 하고, 우회로를 통해 접근하여 정보를 용이하게 하는 것

    상속
    - 이미 견고하게 잘 만들어진 클래스를 가져와 자신만의 기능을 추가 확장하여 사용하는 것
    - 단순 복사 붙이기와 중복을 없애 복잡도를 줄임

    다형성
    하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석될 수 있는 것
    즉, 오버라이딩(Overriding), 오버로딩(Overloading)이 가능하다는 얘기
    오버라이딩 : 부모클래스의 메소드를 재정의해서 사용하는 것.
    오버로딩 : 같은 이름의 함수를 여러개 정의하고, 매개변수의 타입과 개수를 다르게 하여, 필요에 따라 다르게 호출할 수 있게 하는 것.
]
0520[
    UI(User Interface)
    - 사용자가 제품이나 서비스를 사용할 때, 마주하게 되는 것
    - 사용자가 제품이나 서비스와 상호작용할 수 있도록 만들어진 매개체
    - UI 디자인은 폰트, 칼라, 레이아웃과 같이 사용자가 마주하게 될 시각적인 디자인
    
    UX(User Experience)
    - 사용자가 경험의 약자로, 사용자가 어떠한 서비스나 제품을 직간접적으로 이용하면서 느끼는 종합적인 만족을 의미
    - UX 디자인이란 사용자에게 만족스러운 경험을 제공하는 UI를 디자인 하는 것
    - 사용자가 만족할 수 있도록 사용자 중심적으로 설계된 디자인
    - 기존의 경험을 바탕으로 새로운 제품이나 서비스를 쉽게 사용할 수 있도록 해야 한다
    - 아이팟 - 아이팟(인터넷됨) - 아이폰(전화까지가능)
    - 대부분의 프로그램에서 Ctrl + s, Ctrl + C + V 등을 사용하는 것
]
0523[
    비동기 실행
    1. 어떤 식당에 서빙을 하는 직원이 한 명 있다.
    2. A 손님이 식당에 들어와 자리에 앉는다.
    3. 서빙 직원이 손님에게 주문을 받고, 주방에 주문을 전달한 후
    "서빙 직원은 기다린다"
    4. 이때 다른 B 손님이 들어와 테이블에 앉는다.
    5. 주방에서 주문이 완료되는 동안 B 손님에게서 주문을 받는다.
    6. A 손님의 주문이 완료되고 조리된 음식을 A 손님 테이블로 옮긴다.
    7. A 손님이 식사하는 동안 기다린다.
    8. B 손님의 주문이 완료되고 조리된 음식을 B 손님 테이블로 옮긴다.
    9. B 손님이 식사를 하는동안 A 손님은 식사를 마치고 카운터에서 계산을 마무리 한다.
]
0524[
    객체지향 SOLID 원칙
    
    단일책임원칙(SRP, Single Responsibility Principle)
    1. 한(One) 클래스는 한(Single) 의 책임(기능)만 가져야 한다
    2. 한 클래스를 변경했을때 애플리케이션 전반에 수정이 최소화 되도록 하는 원칙

    개방 폐쇄 원칙(OCP, Open-Close Principle)
    1. 서로 관련된 기능과 특성을 한곳에 모으고 분류하여 재활용을 용이하게 하는 것
    2. 결합도는 낮추고 응집도는 높여라

    리스코프 치환 원칙(LSP, Lisov Substitution Principle)
    1. 객체는 프로그램의 정확성을 깨지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야한다.
    2. 하위 클래스는 인터페이스 규약을 지켜서 작성해야 한다.(다형성을 지원하기 위한 원칙)

    인터페이스 분리원칙(ISP, Interface Segration Principle)
    1. 범용(준비된) 인터페이스 하나 둘 보다는
    특정 클라이언트를 위한 여러 개의 인터페이스 분리가 더 좋다.

    의존관계 역전 원칙(DIP, Dependency Inversion Principle)
    1. 구체화가 아니라 추상화에 의존해야 한다.
    2. 구현 클래스(구현체) 가 아니라 인터페이스(역할)에 의존하여 작성해야 한다.

    금요일까지 엔티티 다이어그램 그려오기
    ERD cloud 사이트
    ppt에 그리는 것도 좋음
]
0525[
    ERD - Entity Relation Diagram
    app.diagrams.net (ERD등 다양한 것을 그릴 수 있는 웹)
    (이미지로 복사 기능도 있음)
    나이스 opne api
    https://open.neis.go.kr/portal/data/service/selectServicePage.do?page=1&rows=10&sortColumn=&sortDirection=&infId=OPEN15920190423094641415608&infSeq=2

    나이스 open api인증키 : ebd806fdca3043fa9fcd0c65ee839914
]
0526[
                                데이터 무결성
    도메인 무결성                 개체 무결성          참조 무결성
check, not null, default /   primary key, unique  /   foreign key

교재 Generic 클래스 인터페이스 확인
]
0527[
    스택(Stack)
    후입선출(Last in First out)
    웹 브라우저 뒤로가기
    함수, 메서드 호출 및 종료
    실행취소
    후위 표기법 계산
    수식괄호 계산
    
    큐(Que)
    선입선출
    프로세스 관리
    캐시 구현
    우선순위가 같은 작업 예약(프린터의 인쇄 대기열)
    너비 우선 탐색(BFS, Breadth-First Search) 구현
]
0602[
    WAS(Web Application Service, Server) 
    WEB 
    - 인터넷 기반의 정보기술로 World Wide Web의 줄임 말이며 www라고도 한다. 
    - 전세계 거대한 TCP/IP 네트워크 망을 통해 정보를 공유한다. 
    
    Web Application 
    - 웹 브라우저를 통해서 실행되는 응용프로그램 
    - 인터넷을 통한 은행업무, 인터넷쇼핑, 민원신청 등이 여기에 속한다. 
    - PC 환경에서 실행되던 응용프로그램이 Web 환경으로 이전되고 있다. 
    - 사용자가 요청(Request)을 하면 서버에서는 요청을 분석하여 적절한 비즈니스 로직을 수행하고 사용자에게 결과를 응답(Response)한다. 
    - 웹 브라우저, 웹 서버, 웹 어플리케이션 서버, 데이터베이스 서버 등이 통합된 환경으로 운영된다.
]
0603[
    JSP(Java Server Page)
    - HTML 코드에 Java 코드를 추가하여 동적 웹페이지를 생성하는 웹 어플리케이션 구조
    - JSP는 Java 코드로  transpile되며 다시 컴파일 되어 실행된다.
    - JSP 코드가 Java 코드로 변환된 것을 "서블릿"이라고 한다.
    - 근래에선 JSP를 직접 사용하지 않고, Java 코드를 이용하여 비즈니스 로직을 처리하고 JSP는 View의 용도로 한정되게 사용한다.
     
    Servlet(Server Applet)
    - Java 언어로 작성된 서버 프로그램의 작은 조각들을 말한다.
    - JSP 파일이 톰캣 등 Web Container에 의해 변환된 java 파일이다.
    - 서블릿을 java 코드로 작성하기도 하는데 이때는 문자열 연산(+)을 수행하여 HTML코드를 Client로 보내는 일을 수행하기도 했었다.
]
0607[
    목표
    <a href="${rootPath}"/book/list>목록보기</a> 링크를 클릭하여
    /view/book/list.jsp 열어보기

    Controller 클래스 생성하기
    @Controller
    @RequestMapping(value="/book")
    public class BookController{}

    Method 생성하기
    @RequestMapping(value="/list")
    public String list(){
    return "book/list";
    }
]
0608[
    Spring MVC패턴
]
0609[
    WHERE 조건 절
    1. WHERE 절은 SELECT, UPDATE, DELETE 에서 사용한다
    2. 조건식을 부여하여 특정한 조건에 맞는 데이터만 조회, 수정, 삭제를 하기 위해 사용한다
    3. 일부 JSON 식에서 사용하기도 한다.
    4. UPDATE, DELETE 명령에서는 가급적 PK 를 기준으로 조건을 설정하는 것이 좋다
    SELECT * FROM [tableA] A WHRER A.칼럼 = "값"
    DELETE FROM [tableA] A WHRER A.PK = "값"

    ON 조건 절
    1. OUTER JOIN 에서 Table 간의 JOIN 기준을 설정할 때 사용한다
    SELECT * FROM [tableA] A LEFT [OUTER] JOIN [tableB] B ON A.칼럼 = B.칼럼
    SELECT * FROM [tableA] A RIGHT [OUTER] JOIN [tableB] B ON A.칼럼 = B.칼럼

    username, email 중복검사(과제)
]
0610[
    Data Table 데이터를 view 에서 보여주기
    workspace/memo-DATA-view.PDF
]
0613[
    Response Code(http 오류 코드)
    200: 데이터를 준비하고 있으니 기다려

    302, 304: Redirect 할께

    400: 매개변수 오류
    401: 권한오류
    403: 권한오류
    404: 요청을 처리할 method 가 없어, 응답할 JSP 가 없어
    405: RequestMethod 가 없어

    500: 서버 내부 오류
]
0614[
    Use Case Diagram
    - 유즈케이스 다이어그램은 그대로 말하면 "사용하는 경우 다이어그램"이다
    - 즉, 사용자가 시스템을 사용하는 경우들을 표현한다
    - UML의 기능은 분석, 설계 구현에서 의사소통이기 때문에 유즈케이스 다이어그램의 목적은 사용자 입장에서 시스템이 제공하는 기능이나 서비스 등을 정의한다. 
]
0615[
    model 과 return
]

0616[
    model, 매개변수로 전달된 참조변수
]
0617~0620[
    매개변수 전달과 return

    /*
        문자열 9791159242045 을 findById() 메서드에
        전달(주입)하여 findById() 메서드를 실행하고
        그 결과를 BookVO type 의 bookVO 변수에 받기
        (findById("9791159242045")를 먼저실행 후 bookVO로)
    */
    BookVO bookVO = bookService.findById("9791159242045");

    /*
        문자열 9791159242045 을 String type 의 isbn 변수에 저장하고
        isbn 변수에 저장된 값을 findById() 메서드에 전달하고
        findById() 메서드를 실행하여
        그 결과를 BookVO type 의 bookVO 변수에 받기   
    */
    String isbn = "9791159242045";
    BookVO bookVO = bookService.findById(isbn);

    // 위의 두 코드는 return 되는 결과가 1개일 것임을 예측

    /*
        문자열 자바를 findByTitle()메서드에 전달하고
        그 결과를 BookVO type 의 List 변수 books 에 받기
    */
    List<BookVO> books = bookService.findByTitle("자바");

    /*
        문자열 자바를 String type 의 title 변수에 저장하고
        title 변수에 저장된 값을 findByTitle() 메서드에 전달하고
        findByTitle() 메서드를 실행하여 그 결과(return 값)를
        BookVO type List type 인 books 변수에 받기
        BookVO Generic type 을 갖는 List type 의 books 변수에 받기
        <BookVO> 꺽쇠안에 있는게 Generic type
    */
    String title = "자바";
    List<BookVO> books = bookService.findByTitle(title);


    public class BookServiceImpl{
        public List<BookVO> findByTitle(String title){
            // ....
            List<BookVO> books = bookDao.findByTitle(title);
            return books; // 이 값의 type List<BookVO>
        }
    }
]

0620[
dependencyManagement Spring 의 설정을 통합관
commons-io, commons-fileupload 파일 업로드를 도와주는 dependency
]
0621[
    TDD(Test Driven Developer) 테스트 주도 개발
    1. 주요 코드를 작성하기 전에 코드를 실행하여 얻게(return) 되는 값을 예상하고 테스트 코드를 작성한 후 주요 코드를 작성하는 개발 방법론
    2. 테스트 코드를 작성하면 주요 코드들에 대해 수시로 빠르게 검증을 받을 수 있으며, 유지보수 및 리팩토링을 할 때에도 안정성을 확보할 수 있다는 장점이 있다.
    3. 큰 장점으로 개발 및 테스팅에 대한 시간과 비용을 절감할 수 있다는 점에 주목해야 한다.
    DDD(Domain Driven Design) 도메인 주도 설계
    1. 도메인과 일치하도록 소프트웨어를 모델링하는 데 중점을 둔 소프트웨어 설계 접근 방식이다.
    2. 중요한 특징은 소프트웨어 코드의 구조와 언어(클래스 이름, 클래스 메소드, 클래스 변수) 가 비즈니스 도메인의 용어를 일치시켜 나간다는 점이다.
    예를 들어 소프트웨어가 대출 응용 프로그램을 처리하는 경우
    대출 실행과 고객관리와 같은 클래스와 대출 승인과 대출 거절 같은 업무 프로세스가 있다.
]
0622[
    개발 방법론(결함 검토, 산출물 검토)
    워크 쓰루
    1. 개발 산출물을 작성하는 중에 산출물을 검토하고 결함을 찾아내는 기법
    주로 작성자의 요청에 의해 이루어지며, 중간 산출물을 대상으로 한다
    2. 후속 작업에 대한 검사가 생각될 수 있다
    3. 인스펙션에 비해 비형식적인 동료 검토 방법이다.

    인스펙션
    1. 작성자 외의 다른 전문가가 검사하는 가장 공식적인 리뷰 기법
    2. 문서화된 절차를 기반으로 소프트웨어 명세를 만족하는지 검증
    3. 코딩 전까지는 소요 인력 2배 이상 필요하나 추후 인력 감소로 인해 결과적으로 품질 비용이 감소하고 개발 기간 단축 된다.
    4. 인스펙션 구성원 중 경영자는 제외(표면적 오류만 찾아내려는 경향 발생)
]
0623[
    Java final 변수, 객체
    일반적인(POJO) 자바 코드
    private final BookVO bookVO = new BookVO();
    private final BookService bookService = new BookServiceImpl();
    protected final JavaMailSender sender = new avaMailSenderImpl();
    protected final String strName = '홍길동';

    Spring DI, Ioc 코드
    private final BookService bookService;
    protected final JavaMailSender sender;
    public SendMailServiceImplV1(BookService bookService, JavaMailSender sender){
    this.sender = sender;
    this.bookService = bookService;
    }
    SpMVC_007_EMSV2 프로젝트
    FileUpServiceImplV1 만들어 오기
]
0624[
    One Day Project
    서술형평가대체
    일요일까지 ppt제작
]
0627[
    UI 테스트 기법 페이퍼 프로토타입 평가
    1. 프로토타입의 가장 빠른 방법으로 제품의 전반적인 컨셉과 흐름을 잘 보여주며, 보는 사람들이 최종 제품에 대한 기대를 갖지 않고 더 자유롭게 의견을 개진하면서 발전시킬 수 있는 방법이다.

    목적
    실제 출시될 제품의 디자인을 미리 경험해 봄으로서 수정 및 보완해야 할 부분을 발견할 수 있다

    절차
    1. 종이 위에 제품 및 시스템 개략도를 그린다
    2. 페이지에 특정 순서에 따라 번호나 설명을 별도로 붙인다
    3. 사용자, 디자이너들이 실제 형태를 테스트 해 가면서 발전시킨다
]
0628[
    객체(Object)
 
    객체지향(OOP: Object Oriented Programming)
    현실세계의 Entity를 기계의 부품처럼 하나의 객체로 만들어 기계적인 부품들을 조립하듯이 소프트웨어를 개발할 때도 객체들을 조립하여 작성할 수 있는 기법을 말한다.
     
    데이터
    객체가 가지고 있는 정보로 속성이나 상태, 분류 등을 나타낸다.
    속성(Attribute), 상태, 변수, 상수, 자료구조라고도 한다.
     
    함수
    객체가 수행하는 기능으로 객체가 갖는 데이터(속성, 상태)를 처리하는 알고리즘이다.
    객체의 상태를 참조하거나 변경하는 수단이 되는 것으로 메소드(행위), 서비스(Service), 동작(Operation), 연산이라고 한다.
]
0629[
    UI 테스트 기법 3-선호도 평가
    1. "A"보다 "B"가 더 좋다. "C"보다 "D"가 더 편리하다 와 같이 제품이나 서비스에 대한 사용자의 선호도에 영향을 미치는 속성들을 파악하고, 중요도에 따른 선호도를 예측하기 위하여 사용한다
    2. 사용자의 니즈에 대응할 수 있는 평가 방법이다

    목적
    1. 사용자의 경험을 제대로 읽어내기 위하여 과학적인 시점에서 객관적으로 해석함

    절차 : 수집되는 자료의 특성에 따라 적절한 수정법을 적용해야 한다
    1. 점수(Rating)
    2. 순위(Oridinal Ranking)
    3. 태도 - 기반 선호도(Attitude-Base Preference)
    4. 속성 - 기반 선호도(Attribute-Base Preference)
]
0630[
    UI 테스트 기법 4-성능평가
    1. 사용자가 실제로 제품이나 서비스와 관련된 것을 사용해 보고 태스크(Task)별로 학습성, 효율성, 기억용이성, 오류, 만족도 등에 평가하여 그 결과를 바탕으로 성능을 개선한다
    2. 제품이나 서비스를 개발하는 단계에 맞춰 평가를 진행한다

    목적
    1. 개발 마지막 단계에서 각 제품이나 서비스의 태스크 들이 지닌 장단점을 파악하기 위해 실행

    결과물 : 학습성, 효율성, 기억용이성, 오류, 만족도에 대한 평가 결과물
    1. 학습성 : 쉽게 학습 할 수 있는가
    2. 기억용이성 : 한번이상 사용해본 기능을 능숙하게 다시 사용할 수 있는가
    3. 오류 : 오류가 적고, 사용자가 상황을 쉽게 극복 할 수 있는가?
    4. 만족도 : 사용하는 것이 즐겁고 만족스러운가
]
0701[
                        UI 테스트 기법

                        휴리스틱 평가

    상태전이 다이어그램              페이퍼프로토 타입 테스트

                        사용성 테스트기법

            온라인설문,                  심층인터뷰,
            사용성 테스트                포커스 그룹인터뷰
                                        사용성 테스트

]
0705[
    상태가 없는 HTTP 프로토콜
    1. HTTP 프로토콜은 클라이언트의 요청이 있을때 만 서버가 응답을 한다.
    
    2. 무(無) 상태(stateless) : 요청/응답이 완료되면 클라이언트와 서버는 어떤 연결도 유지 하지 않는다.
    클라이언트가 이전 요청과 같은 데이터를 원한다고 하더라도
    다시 서버에 연결을 하여 동일한 요청을 시도해야만 한다.
    
    3. 비(非) 연결(connectionless)
    또한 요청/응답이 완료되면 클라이언트와 서버는 즉시 연결이 종료된다.
    
    4. 무 상태, 비 연결 구조의 HTTP에서 사용자 인증을 처리하기 위해서는 매 요청마다 사용자 정보를 어딘 가에 담아서 보내고, 서버는 매 요청마다 사용자 정보가 정상인지 판단하는 절차를 통과해야 한다
    많은 사용자 요청이 있을 경우 서버는 많은 비용을 지불해야 할 수 있다.
   
    5. 초기의 HTTP 프로토콜에서는 URL에 사용자정보를 함께 실어서 요청을 했었다.
    http://username:password@www.example.com/
    지금은 사용하지 않으며 해당 요청은 브라우저에서 거부한다.
]
0706[
    HTTP에서 상태 유지 기법 - 쿠키(Cookie)

    - 서로의 연결성과 상태 유지하지 않는 서버와 클라이언트가 로그인을 처리하기 위한 방법으로 쿠키는 웹 브라우저가 보관하는 데이터이다.

    - 웹 서버는 로그인한 사용자 정보가 담긴 쿠키를 생성하여 웹 브라우저에 정보를 내려 보낸다.

    - 웹 브라우저는 쿠키는 Key-Value(변수-값) 형태로 브라우저의 쿠키 저장소에 저장한다.

    - 웹 브라우저는 이후 동일한 주소의 웹 서버에 요청을 보낼 때 저장소에 있는 쿠키를 헤더에 실어서 함께 전송한다.

    - 웹 서버는 요청 헤더에 담긴 쿠키정보를 확인하고 로그인 된 사용자로 인식한다.

    - 웹서버와 클라이언트는 필요한 값을 공유하고 상태를 유지한다.

    - 쿠키는 "Text 형태로 교환되므로 네트워크에서 탈취"되기 쉽다.

    - 웹 브라우저에 접근할 수 있는 누구나 쿠키를 열어보고 내용을 알아낼 수 있다.
    
    - 탈취된 쿠키는 변형되거나 악의적인 용도로 사용될 수 있다.
]
0712[
    HTTP에서 상태 유지 기법 - 세션(Session)
    1. 세션도 쿠키와 마찬가지로 클라이언트의 상태를 저장하고 상태를 유지하는 용도로 사용한다
    2. 웹 브라우저는 각각 별도의 고유의 값을 갖는다.
    3. 각 세션에 고유 ID 를 생성하고, 웹 서버는 각 브라우저에 세션ID가 담긴 쿠키를 내려 보낸다. TOMCAT에서 발급하는 쿠키의 Key 는 JSESSIONID 입니다.
    4. 웹 브라우저는 웹 서버에 연결할 때 세션 ID가 담긴 쿠키를 함께 전송한다.
    5. 웹 서버는 요청 헤더에 담겨있는 세션 ID를 확인하고 세션 저장소에 보관중인 데이터를 조회하여 상태를 유지한다.

    쿠키와 세션의 중요한 차이 - 로그인 성공 후
    1. 쿠키는 로그인한 사용자 정보를 Text 문자열로 생성하여 브라우저에 전송하고
    2. 브라우저는 쿠키 저장소에 사용자 정보를 문자열로 저장한다

    1. 세션은 로그인한 사용자 정보를 서버의 메모리에 저장하고
    2. 저장소 ID 정보를 쿠키에 담아 브라우저에 전송한다
    3. 브라우저는 쿠키 저장소에는 세션의 ID값만 저장이 되어 있다.
    4. 서버로 전송된 쿠키에 담긴 세션 ID를 사용하여 서버 메모리에서 사용자 정보를 조회한다.
]
0713[
    Spring Container
    1. Container 는 Spring 의 핵심이다.
    Container 는 개발자를 대신하여, Bean 을 생성/관리/제거한다.
    2. Container 가 Bean 을 관리해주기 때문에
    개발자는 모듈 간에 의존 및 결합으로 인해 발생하는 문제로부터 자유로워 진다.
    3. 독립적인 코드를 작성해서 Annotaion만 남겨주면
    Container 가 개발자가 원하는 상황에 코드를 실행한다.
    4. 개발자는 메서드가 언제, 어디서 호출되어야 하는지
    그리고 메서드를 호출하기 위해 필요한 매개 변수를 준비해서 전달하지 않는다. Container 가 개발자 대신 알아서 호출한다.
    5. 개발자가 Container 개념 즉, Spring framework 의 설계를 이해해야 하는 이유는 Container 가 겉으로 드러나지 않기 때문에 처음 Spring 을 접하면 작동 원리를 이해하기 어렵다.
]
0715[
    관계형 데이터베이스(RDBMS)
    1. 기본 구성이 Table
    2. 키(Key)와 값(value)들의 간단한 관계를 테이블화 시킨 매우 간단한 원칙의 데이터베이스
    각 Table은 Key, Value 쌍으로 데이터 표현
    3. 데이터간의 종속성을 Relation Ship으로 표현
    4. 데이터의 완전한 무결성이 보장되어야 하는 곳에서 주로 사용
    5. 
]
0718[
    Data Storeage(물리적 데이터 저장소)
    오라클
    1. Table Space
        1) 초기에 적절한 크기의 빈(Blank) 공간을 확보한다.
        2) 데이터를 insert 할때 효율적이다.
        3) 사용자와 TableSpace 를 연결해 둘 수 있으며, Login 과 동시에 Table Space에 연결된다.
        4) 적절한 크기를 확보하기 위하여 설계 시 고려할 사항이 많다.

    MySQL, MarriaDB, MSSQL 등
    1. Data Base
        1) 표준 SQL 명령을 사용하는 일반적인 DB 엔진들
        2) Login 한 후 어떤 DB 를 사용할 것인지 명령으로 설정해야 한다.
        USE DB
]
0720[
    Transaction1
    정의
    1. 한가지 업무를 수행하는데 다수의 데이터 조작(CRUD)가 필요할 경우 이를 논리적인 단위로 묶은 것

    성질
    1. Atomic(원자성) : 트랜잭션이 모두 완료되어 COMMIT 되던지, ROLLBACK ALL 되어 모두 반영되지 않아야 한다.
    2. Consistency(일관성) : 트랜잭션이 성공하면 데이터 일관성이 보장되어야 한다.
    3. Isolation(독립성) : 트랜잭션이 완료되기 전에는 다른 트랜잭션에서 참조 할 수 없다.
    4. Durablity(영속성) : 성공한 트랜잭션의 결과는 시스템이 고장 나더라도 유지 되어야 한다.

    Commit
    1. 트랜잭션이 모두 성공했을 때 로컬 스토리지의 물리적 데이터를 갱신하는 것, 실질적으로 데이터를 저장

    RollBack
    1. 트랜잭션이 중간에 실패했을 때 처음 상태로 되돌리는 것, DB 변경사항을 모두 원점으로 복귀
]

0721[
    Transaction2
    병행처리(여러 트랜잭션의 동시 수행)문제
    1. 갱신 내용 손실 : 하나의 데이터가 동시에 갱신될 때 갱신이 누락되는 문제
    2. 현황 파악 오류 : 데이터 갱신이 완료되지 않았는데 다른 트랜잭션이 데이터를 조회하는 문제
    3. 모순성 : 데이터의 일관성이 깨져 모순된 상태로 남는 문제
    4. 연쇄 복귀 : 두 트랜잭션 중 한 곳에서 롤백이 되면, 다른 트랜잭션도 롤백되는 문제

    병행처리 문제 방지
    1. 로깅 제어 기법을 사용한다.
    2. 트랜잭션이 시작할 때 필요한 데이터를 모두 Lock을 걸고 시작하는 것
    3. 공유로깅 : 읽기만 허용하는 Lock
    4. 배타로깅 : 읽기, 쓰기 모두 금지하는 Lock
]
0722[
    정규화
    목적
    1. 데이터의 중복을 최소화
    2. insert(삽입), Delete(삭제), Update(갱신) 이상 현상을 방지
    3. 데이터베이스 구조 변경 확장 시 재 디자인 최소화
    4. 데이터 모델을 사용자에게 더욱 의미 있게
    5. 다양한 질의 지원

    정규화 요약
    1. 제1정규화 : 각 칼럼들의 값이 원자 값을 갖도록 한다.
    2. 제2정규화 : 부분 함수 종속성을 제거
    3. 제3정규화 : 기본키를 제외한 속성들 간에 이행적 함수 종속 제거
    4. BCNF정규화 : 결정자이며 후보키가 아닌 것을 제거
    5. 제4정규화 : 다치 종속 제거

    함수 종속성
    1. 테이블의 속성(칼럼) 간의 관계에서 속성A에 의해 속성B가 결정될 때 B는 A에 함수적으로 종속
]